openapi: 3.0.2
info:
  title: Items_MS API
  version: 1.0.0
  description: List of items API
  contact:
    name: Maarika Lukk
    url: 'https://github.com/maarikal'
    email: maarika.lukk@voco.ee
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
paths:
  /items:
    summary: Path used to manage the list of items.
    description: >-
      The REST endpoint/path used to list and create zero or more `items` entities.  This path contains
      a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - Items
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Items returned:
                  value:
                    description: some text
                    image: a picture
                    name: new namet
            text/xml:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Item returned:
                  value: "<Item>\r\n    <description>some text</description>\r\n    <image>returned item image</image>\r\n    <name>returned item name</name>\r\n</Item>"
          description: Items returned
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unauthorized:
                  value:
                    error: Unauthorized
                Bearer:
                  value:
                    error: Authorization header is not in Bearer XXX format
                Session not found:
                  value:
                    error: Session not found
                User not found:
                  value:
                    error: User not found
          description: Unauthorized
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not Acceptable:
                  value:
                    error: Not acceptable
          description: Not accetable
      security:
        - Bearer: [ ]
      summary: Get all items
      description: Gets a list of all `items` entities.
    post:
      requestBody:
        description: A new `items` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              ' PostItemsRequestBody_json':
                value:
                  name: new bird
                  description: it is green and small
                  image: >-
                    https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhBY9h14uKCSgCxNCZEhClbX2ksq2Fi6iCmQ&usqp=CAU
          text/xml:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              PostItemsRequestBody_xml:
                value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<root>\r\n\t<name>item nr 1</name>\r\n\t<description>it is green and small</description>\r\n\t<image>https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhBY9h14uKCSgCxNCZEhClbX2ksq2Fi6iCmQ&amp;usqp=CAU</image>\r\n</root>\r\n</head>"
        required: true
      tags:
        - Items
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Item returned:
                  value:
                    description: some text
                    image: returned item image
                    name: returned item name
            text/xml:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Item returned:
                  value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<root>\r\n\t<name>item nr 1</name>\r\n\t<description>it is green and small</description>\r\n\t<image>https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhBY9h14uKCSgCxNCZEhClbX2ksq2Fi6iCmQ&amp;usqp=CAU</image>\r\n</root>\r\n</head>"
          description: Return item
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not Acceptable:
                  value:
                    error: Not Acceptable
          description: Not Acceptable
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Internal Server Error:
                  value:
                    Error: Internal Server Error
          description: Internal Server Error
      security:
        - Bearer: [ ]
      operationId: createitems
      summary: Create a item
      description: Creates a new instance of a `items`.
  /users:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              PostSessionsRequestBody:
                value:
                  email: test@test.ee
                  password: qwerty123
          text/xml:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              PostUserRequestBody_xml:
                value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<User>\r\n\t<email>test@test.ee</email>\r\n\t<password>qwerty123</password>\r\n</User>\r\n</head>"
        required: true
      tags:
        - Users
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                User returned:
                  value:
                    email: some email
                    password: some password
            text/xml:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                User returned:
                  value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<User>\r\n\t<email>test@test.ee</email>\r\n\t<password>qwerty123</password>\r\n</User>\r\n</head>"
          description: Return user
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Bad Request:
                  value:
                    error: Bad Request
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                '"Bad Request':
                  value: <text>"Bad Request</text>
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'Password ':
                  value:
                    error: Password is required
                Password lengths:
                  value:
                    error: Password must be at least 8 characters long
                Email:
                  value:
                    error: Email is required
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Password is required:
                  value: <text>Password is required</text>
                Password must be at least 8 characters long:
                  value: <text>Password must be at least 8 characters long</text>
                Email is required":
                  value: <text>Email is required"</text>
          description: Invalid email or password
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                User exists:
                  value:
                    error: User already exists
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                User already exists:
                  value: <text>User already exists</text>
          description: User already exists
      security:
        - Bearer: [ ]
      summary: Create a new user
  /users/check-email:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              PostSessionsRequestBody:
                value:
                  email: test1@test.ee
                  password: qwerty123
          text/xml:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              PostUsersRequestBody:
                value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<User>\r\n\t<email>test@test.ee</email>\r\n\t<password>qwerty123</password>\r\n</User>\r\n</head>"
        required: true
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Email is valid:
                  value:
                    email: some email
                    password: password
          description: Email is valid
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Bad Request:
                  value:
                    error: Bad Request
          description: Bad Request
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Email already exists:
                  value:
                    error: Email already exists
          description: Email already exists
      security:
        - Bearer: [ ]
      summary: Create a new email
  /health-check:
    get:
      tags:
        - Health-checks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Is Working:
                  value:
                    message: works
          description: OK
      summary: Get project load information
  /sessions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              PostSessionsRequestBody:
                value:
                  email: test@test.ee
                  password: qwerty123
          text/xml:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              PostSessionsRequestBody:
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<User>\r\n\t<email>test@test.ee</email>\r\n\t<password>qwerty123</password>\r\n</User>"
        required: true
      tags:
        - Sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                SessionId:
                  value:
                    user: test@test.ee
                    password: qwerty123
            text/xml:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                SessionId:
                  value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<User>\r\n\t<email>test@test.ee</email>\r\n\t<password>qwerty123</password>\r\n</User>\r\n</head>"
          description: Send sessionId
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Bad Request Error:
                  value:
                    error: Bad Request Error
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Bad Request Error:
                  value: <text>Bad Request Error</text>
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Session not found:
                  value:
                    error: Session not found
                User not found:
                  value:
                    error: User not found
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Session not found:
                  value: <text>Session not found</text>
                User not found:
                  value: <text>User not found</text>
          description: Session not found
      security:
        - Bearer: [ ]
      summary: Create a new session
    delete:
      tags:
        - Sessions
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                SessionId deleted:
                  value:
                    Session: SessionId deleted
          description: SessionId deleted
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                No session:
                  value:
                    error: No session found
          description: No session found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Internal Server Error:
                  value:
                    error: Internal Server Error
          description: Internal Server Error
      security:
        - Bearer: [ ]
      summary: Delete a session
  '/items?id={itemsId}':
    summary: Path used to manage a single items.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `items`.  This path
      contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks,
      respectively.
    post:
      requestBody:
        description: Added item information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              PostItemIdRequestBody_json:
                value:
                  name: new bird2
                  description: it is green and small
                  image: >-
                    https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhBY9h14uKCSgCxNCZEhClbX2ksq2Fi6iCmQ&usqp=CAU
          text/xml:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              PostItemIdRequestBody_xml:
                value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n\t<name>item nr 2</name>\n\t<description>it is green and small</description>\n\t<image>https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhBY9h14uKCSgCxNCZEhClbX2ksq2Fi6iCmQ&amp;usqp=CAU</image>\n</root>\n</head>"
        required: true
      tags:
        - Items
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Created:
                  value:
                    description: some text
                    image: one image
                    name: some name
            text/xml:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Created:
                  value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Item>\r\n    <id></id>\r\n    <description>some text</description>\r\n    <image>returned item image</image>\r\n    <name>returned item name</name>\r\n</Item>\r\n</head>"
          description: Item created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                ' Successful response.':
                  value:
                    Item: Successful response
            text/xml:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                ' Successful response.':
                  value: <text>Successful response</text>
          description: Successful response.
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not Acceptable:
                  value:
                    error: Not Acceptable
          description: Not Acceptable
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Internal Server Error:
                  value:
                    Error: Internal Server Error
          description: "\t\r\nInternal Server Error"
      security:
        - Bearer: [ ]
      operationId: addeditem
      summary: Add a new item
      description: Added new item.
    delete:
      tags:
        - Items
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Successful response.:
                  value:
                    Item: Successful response
          description: Successful response.
      security:
        - Bearer: [ ]
      operationId: deleteitems
      summary: Delete a item
      description: Deletes an existing `items`.
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              PatchItemRequestBody_json:
                value:
                  name: new bird
                  description: it is green and small
                  image: >-
                    https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhBY9h14uKCSgCxNCZEhClbX2ksq2Fi6iCmQ&usqp=CAU
          text/xml:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              PatchItemRequestBody_xml:
                value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Item>\r\n    <id></id>\r\n    <description>some text</description>\r\n    <image>returned item image</image>\r\n    <name>returned item name</name>\r\n</Item>\r\n</head>"
        required: true
      tags:
        - Items
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Item created:
                  value:
                    description: some text
                    image: some image
                    name: some name
            text/xml:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Item created:
                  value: "<head><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Item>\r\n    <id></id>\r\n    <description>some text</description>\r\n    <image>returned item image</image>\r\n    <name>returned item name</name>\r\n</Item>\r\n</head>"
          description: Item created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Response:
                  value:
                    description: some text
                    image: some image
                    name: some name
            text/xml:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Successful response:
                  value: "<Item>\r\n    <id></id>\r\n    <description>some text</description>\r\n    <image>returned item image</image>\r\n    <name>returned item name</name>\r\n</Item>"
          description: Successful response.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Internal Server Error:
                  value:
                    Error: Internal Server Error
          description: Internal Server Error
      security:
        - Bearer: [ ]
      operationId: updateitem
      summary: Update a item
      description: Updates an existing item.
    parameters:
      - name: itemsId
        description: A unique identifier for a `items`.
        schema:
          type: string
        in: path
        required: true
  /oAuth2Login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
            examples:
              GoogleAuthRequestBody:
                value:
                  token: >-
                    eyJhbGciOiJSUzI1NiIsImtpZCI6IjYwODNkZDU5ODE2NzNmNjYxZmRlOWRhZTY0NmI2ZjAzODBhMDE0NWMiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2ODYyMjAwNDMsImF1ZCI6IjY2ODI1MDMwMTcwNC1xN2o0dDh0bmttazg4ajNkNmpzcmt1anQ3NDMxMXVuYi5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExMTY5NzM3MTkzMDAzMTY4NzY1OSIsImhkIjoidm9jby5lZSIsImVtYWlsIjoibWFhcmlrYS5sdWtrQHZvY28uZWUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXpwIjoiNjY4MjUwMzAxNzA0LXE3ajR0OHRua21rODhqM2Q2anNya3VqdDc0MzExdW5iLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwibmFtZSI6Ik1hYXJpa2EgTHVrayIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS9BQWNIVHRlVUkyNG9RRzlRNHdXd2hJNF9nQ2xzeXhHRC02cUlrdUQ0Wmd3bT1zOTYtYyIsImdpdmVuX25hbWUiOiJNYWFyaWthIiwiZmFtaWx5X25hbWUiOiJMdWtrIiwiaWF0IjoxNjg2MjIwMzQzLCJleHAiOjE2ODYyMjM5NDMsImp0aSI6IjRhYjA1MjlhNjRlMTJiYzBhZDc4NmM4N2JmMWE1NGNmNDliYzM5OTgifQ.glgcojKWzEaKAtqHpCc4B7aZqFBFFzCs29LJG9GJwj7SW8xVf1XJRkUfRrsUV5H0gNyMx_f3m3Pv1chPX5P-teVlDORHg9jh_zJ__rsGCHZqiaG9pC4cJJvVjWq6JThHzQOALIgMxgbc_hDCZuImeoGXQinSrJ31qbe7JMsyCv3_LIv0DRJ0yXjnmsu9vfMtUaRDZLS_6njlI_nQZU6M2rl0slGGyged7-oqWugPDxVh7nvgq55QKqejyfUKGsnf9FUHsHJa86s8xc-YuDxDrj62PvI0_WoU1IGRYO4OX0H6x336o1W9cakd-1WoNRTK89vaWrephKuof0aWYh9e-A
        required: true
      tags:
        - oAuth2Login
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                SessionId:
                  value:
                    user: test@test.ee
                    password: qwerty123
          description: Returns sessionId
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Bad Request:
                  value:
                    error: Bad Request
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Internal Server Error:
                  value:
                    Error: Internal Server Error
          description: Internal Server Error
      security:
        - Bearer: [ ]
  /logs:
    get:
      tags:
        - Logs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Logs sent:
                  value:
                    logs:
                      - item:
                          description: >-
                            Emeepabi topha edmuk wujzi hubdi jo riwbeoc ozgi caf
                            celurbe gubi neg fopuvfu kiakba rowdelwol la hapupes.
                          id: 353
                          image: 'https://picsum.photos/96/96?random=447'
                          name: uuuuuus2
                        message: ITEM UPDATED
                        timestamp: '01-06-2023 11:12:51'
          description: |
            Logs sent
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unauthorized:
                  value:
                    error: Unauthorized
                Bearer:
                  value:
                    error: Authorization header is not in Bearer XXX format
                Session not found:
                  value:
                    error: Session not found
                User not found:
                  value:
                    error: User not found
          description: "\t\r\nUnauthorized"
      security:
        - Bearer: [ ]
components:
  schemas:
    User:
      title: Root Type for User
      description: 'If person have signed up, then he will be on database. With these data he/she can sign in too.'
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: test@test.ee
        password: qwerty12
    Item:
      title: Root Type for items
      description: Items list
      type: object
      properties:
        description:
          type: string
        image:
          type: string
        name:
          type: string
      example:
        name: item nr 1
        description: it is green and small
        image: >-
          https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhBY9h14uKCSgCxNCZEhClbX2ksq2Fi6iCmQ&usqp=CAU
    Session:
      title: Root Type for Session
      description: 'If user is on webpage and have logged in, then he/she has a sessionId.'
      type: object
      properties:
        user:
          type: string
        password:
          type: string
      example:
        user: test@test.ee
        password: qwerty123
    Credentials:
      title: Root Type for Credentials
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: test@test.ee
        password: qwerty123
    Error:
      description: |-
        {
            "error:" "Error message"
        }
      type: object
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
tags:
  - name: Items
    description: ''
  - name: Sessions
    description: ''
  - name: Users
    description: ''
  - name: Health-checks
    description: ''
  - name: Logs
    description: ''
  - name: oAuth2Login
    description: ''
